
import React from 'react';
import { Dialog, DialogContent, DialogHeader, DialogTitle } from "@/components/ui/dialog";

export type CardType = 'initial' | 'regular' | 'end' | 'property' | 'service' | 'product' | 'action' | 'multiple' | 'payment' | 'scheduling' | 'qa' | 'contact';

interface CardTypeOption {
  type: CardType;
  label: string;
  description: string;
  icon: string;
}

const cardTypes: CardTypeOption[] = [
  { type: 'initial', label: 'Inicial', description: 'Ponto de in√≠cio do fluxo', icon: 'üöÄ' },
  { type: 'regular', label: 'Regular', description: 'Cart√£o padr√£o de fluxo', icon: 'üìù' },
  { type: 'end', label: 'Final', description: 'Ponto de conclus√£o', icon: 'üèÅ' },
  { type: 'property', label: 'Im√≥vel', description: 'Detalhes de propriedade', icon: 'üè†' },
  { type: 'service', label: 'Servi√ßo', description: 'Descri√ß√£o de servi√ßo', icon: 'üõ†Ô∏è' },
  { type: 'product', label: 'Produto', description: 'Informa√ß√µes de produto', icon: 'üì¶' },
  { type: 'action', label: 'A√ß√£o', description: 'A√ß√£o espec√≠fica', icon: '‚ö°' },
  { type: 'multiple', label: 'M√∫ltipla Escolha', description: 'Op√ß√µes m√∫ltiplas', icon: 'üìã' },
  { type: 'payment', label: 'Pagamento', description: 'Informa√ß√µes de pagamento', icon: 'üí≥' },
  { type: 'scheduling', label: 'Agendamento', description: 'Marcar hor√°rio/data', icon: 'üìÖ' },
  { type: 'qa', label: 'Perguntas e Respostas', description: 'FAQ e suporte', icon: '‚ùì' },
  { type: 'contact', label: 'Contato', description: 'Informa√ß√µes de contato', icon: 'üìû' }
];

interface CardTypeSelectorProps {
  isOpen: boolean;
  onClose: () => void;
  onSelect: (type: CardType) => void;
}

const CardTypeSelector: React.FC<CardTypeSelectorProps> = ({ isOpen, onClose, onSelect }) => {
  return (
    <Dialog open={isOpen} onOpenChange={onClose}>
      <DialogContent className="max-w-3xl max-h-[80vh] overflow-y-auto">
        <DialogHeader>
          <DialogTitle>Selecione o Tipo de Cart√£o</DialogTitle>
        </DialogHeader>
        <div className="grid grid-cols-2 md:grid-cols-3 gap-4 p-4">
          {cardTypes.map((cardType) => (
            <button
              key={cardType.type}
              onClick={() => onSelect(cardType.type)}
              className="flex flex-col items-center p-4 border rounded-lg hover:bg-gray-50 transition-colors text-left"
            >
              <span className="text-2xl mb-2">{cardType.icon}</span>
              <h3 className="font-semibold">{cardType.label}</h3>
              <p className="text-sm text-gray-600">{cardType.description}</p>
            </button>
          ))}
        </div>
      </DialogContent>
    </Dialog>
  );
};

export default CardTypeSelector;
